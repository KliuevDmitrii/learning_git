from ConfigProvider import ConfigProvider
from DataProvider import DataProvider
import requests
import time
import urllib.parse
import urllib.request

config = ConfigProvider()
url_base = config.get_exchange_url_base()
base_currency = config.get_base_currency()
target_currency = config.get_target_currency()

url = f"{url_base}?base={base_currency}&symbols={target_currency}"
print(f"URL used: {url}")

dp = DataProvider()
access_key = dp.get_api_key()

max_threshold = config.get_exchange_threshold()
min_threshold = config.get_exchange_min_threshold()


def send_telegram(msg):
    base_url = config.get_exchange_url_telegram()
    token = dp.get_telegram_token()
    chat_id = dp.get_telegram_chat_id()
    url = f"{base_url}{token}/sendMessage"
    data = urllib.parse.urlencode({
        "chat_id": chat_id,
        "text": msg
    }).encode()

    try:
        with urllib.request.urlopen(url, data=data) as response:
            result = response.read()
            print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", result)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", e)


def get_usd_rate(max_retries=3, retry_delay=120):
    headers = {"apikey": access_key}

    for attempt in range(1, max_retries + 1):
        try:
            print(f"[–ü–æ–ø—ã—Ç–∫–∞ {attempt}] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫—É—Ä—Å "
                  f"{base_currency}/{target_currency}...")

            r = requests.get(url, headers=headers, timeout=10)
            data = r.json()

            if data.get("rates") and target_currency in data["rates"]:
                return data["rates"][target_currency]
            else:
                print("–û—à–∏–±–∫–∞ –æ—Ç API:", data.get("error", "–ù–µ—Ç –ø–æ–ª—è 'rates'"))
                send_telegram("API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –∏–ª–∏ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                return None

        except requests.exceptions.ReadTimeout:
            print(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API."
                  f" –ü–æ–ø—ã—Ç–∫–∞ {attempt} –∏–∑ {max_retries}")
            send_telegram(
                f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–∞ ({attempt}/{max_retries})")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
            send_telegram(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ ({attempt}/{max_retries}): {e}")

        if attempt < max_retries:
            print(f"–ñ–¥—ë–º {retry_delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...\n")
            time.sleep(retry_delay)

    print("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å.")
    send_telegram("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ.")
    return None


rate = get_usd_rate()

if rate is None:
    print("–ö—É—Ä—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    exit(1)

if rate > max_threshold:
    message = f'üìà –ö—É—Ä—Å {base_currency}/{target_currency}'
    f'–ø—Ä–µ–≤—ã—Å–∏–ª –º–∞–∫—Å–∏–º—É–º {max_threshold}: {rate}'
elif rate < min_threshold:
    message = f'üìâ –ö—É—Ä—Å {base_currency}/{target_currency}'
    f'–Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ {min_threshold}: {rate}'
else:
    message = (
        f'‚úÖ –ö—É—Ä—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã: {min_threshold} ‚â§ '
        f'{rate} ‚â§ {max_threshold}'
        )

print(message)
send_telegram(message)
